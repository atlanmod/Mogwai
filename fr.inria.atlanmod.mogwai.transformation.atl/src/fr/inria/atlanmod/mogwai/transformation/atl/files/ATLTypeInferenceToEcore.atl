-- @atlcompiler atl2010
-- ATL Type Inference support for Ecore Platform by Frédéric Jouault
-- @nsURI ATL=http://www.eclipse.org/gmt/2005/OCL
-- @nsURI SourceEcore=http://www.eclipse.org/emf/2002/Ecore
library ATLTypeInferenceToEcore;

helper context String def: primitiveType : OclAny =
	Map {
		('Boolean', SourceEcore!EDataType.allInstancesFrom('SourceEcore')->any(e | e.name = 'EBoolean'))
--		('Integer', SourceEcore!EInteger),
--		('String', SourceEcore!EString)
	}.get(self);

--helper context UML!Behavior def: type : UML!Type =
--	let p : UML!Parameter = self.ownedParameter->any(e |
--								e.direction = #return
--							)
--	in
--	if p.oclIsUndefined() then
--		OclUndefined
--	else
--		p.type
--	endif;

helper context SourceEcore!EClassifier def: ttype : String = OclUndefined;

helper context ATL!OclModelElement def: toPlatform : OclAny =
	SourceEcore!EClassifier.allInstancesFrom('SOURCEMM') -> any(e |
		e.name = self.name
	);

helper context SourceEcore!EClass def: navigableProperties : OrderedSet(OclAny) =
	self.eAllStructuralFeatures;

helper context SourceEcore!EStructuralFeature def: upper : Integer =
	self.upperBound;
helper context SourceEcore!EStructuralFeature def: type : Integer =
	self.eType;
helper context SourceEcore!EAttribute def: type : Integer =
	self.eType.name.primitiveType;

helper context String def: class: OclAny =
	SourceEcore!EClass.allInstancesFrom('SOURCEMM') -> any(e | e.name = self);

--helper context UML!Element def: origin : String =
--	' from ' + self.eResource().toString();

helper context ATL!OperationCallExp def: platformSpecificInferredType : OclAny =
	let sourceType : OclAny = self.source.inferredType in
	if sourceType = 'Boolean'.primitiveType then
		if self.operationName = 'not' then
			sourceType
		else
			OclUndefined
		endif
	else
		OclUndefined
	endif;
