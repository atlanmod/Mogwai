-- @path ATL=/org.eclipse.m2m.atl.common/org/eclipse/m2m/atl/common/resources/ATL.ecore
-- @path Gremlin=/fr.inria.atlanmod.mogwai.gremlin/model/gremlin.ecore
-- @path SourceEcore=/org.eclipse.emf.ecore/model/Ecore.ecore
-- @path TargetEcore=/org.eclipse.emf.ecore/model.Ecore.ecore

module atl2gremlin;

create OUT: Gremlin from IN: ATL, SOURCEMM:SourceEcore, TARGETMM:TargetEcore;

helper def : resourceName : String = 'OUTROOT';

helper def : transformationHelperBinding : String = 'tHelper';

helper context ATL!Module def: getMatchedRules() : Sequence(ATL!MatchedRule) =
	ATL!MatchedRule.allInstances()->select(e | e.oclIsTypeOf(ATL!MatchedRule))->asSequence()
;

helper context ATL!Module def: getLazyRules() : Sequence(ATL!LazyMatchedRule) =
	ATL!LazyMatchedRule.allInstances()->asSequence()
;

helper context ATL!Module def: getHelpers() : Sequence(ATL!Helper) =
	ATL!Helper.allInstances()->asSequence()
;

-- Get all the types matched by the transformation
-- Note that for now rules matching type tuples are not supported
-- @TODO support rules matching type tuples
helper context ATL!Module def: getMatchedTypes() : Set(ATL!OclModelElement) =
	thisModule.removeDuplicates(
		self.getMatchedRules()
			->collect(e | e.inPattern)
			->collect(e | e.elements->first())
			->collect(e | e.type)
	)
;

-- Get all the types created by the transformation
helper context ATL!Module def: getCreatedTypes() : Set(ATL!OclModelElement) = 
	thisModule.removeDuplicates(
		self.getMatchedRules()
			->collect(e | e.outPattern.elements)->flatten()
			->collect(e | e.type)
	)
;

helper def : removeDuplicates(col : Sequence(ATL!OclModelElement)) : Set(ATL!OclModelElement) =
	col->iterate(e; res: Sequence(ATL!OclModelElement) = Sequence{} |
		if(not(res->collect(x | x.name)->includes(e.name))) then
			res->append(e)
		else
			res
		endif
	)->asSet()
;
	

helper context ATL!MatchedRule def: getMatchedType() : ATL!OclModel =
	self.inPattern.elements->first().type
;

helper context ATL!MatchedRule def: getOclGuard() : ATL!OclExpression =
	self.inPattern.filter
;

helper context ATL!MatchedRule def : getOutTypes() : Sequence(ATL!OclModelElement) =
	self.outPattern.elements->collect(e | e.type)->asSequence()
;

helper context ATL!Binding def : getBindedElement() : String =
	if self.refImmediateComposite().oclIsKindOf(ATL!OutPatternElement) then
		self.refImmediateComposite().varName
	else
		OclUndefined.debug('Cannot find the binded element for ' + self + ' (parent: ' + self.refImmediateComposite() + ')')
	endif
;

helper context ATL!Binding def : getBindedElementClass() : String = 
	if self.refImmediateComposite().oclIsKindOf(ATL!OutPatternElement) then
		self.refImmediateComposite().type.name
	else 
		OclUndefined.debug('Cannot find the binded class for ' + self + 'parent: ' + self.refImmediateComposite() + ')')
	endif
;
	
helper def : getTargetEClassFromString(eClass : String) : TargetEcore!EClass = 
	TargetEcore!EClass.allInstancesFrom('TARGETMM')->select(cc | cc.name = eClass)->first()
;

-- Returns true if the binding sets an attribute value, false otherwise
-- Note: returning false does not mean the binding sets a reference value, it may also mean that
-- the EStructuralFeature was not found in the source metamodel (it is debugged in that case)
helper context ATL!Binding def : isAttributebinding() : Boolean = 
	let selfClass : TargetEcore!EClass = thisModule.getTargetEClassFromString(self.getBindedElementClass()) in
		let att : TargetEcore!EAttribute = selfClass.eAllAttributes->select(aa | aa.name = self.propertyName)->first() in
			if att.oclIsUndefined() then
				false
			else
				true
			endif
;
	
helper context ATL!Binding def : isReferenceBinding() : Boolean =
	let selfClass : TargetEcore!EClass = thisModule.getTargetEClassFromString(self.getBindedElementClass()) in
		let ref : TargetEcore!EReference = selfClass.eAllReferences->select(rr | rr.name = self.propertyName)->first() in
			if ref.oclIsUndefined() then
				false
			else
				true
			endif
;

rule module2script {
	from 
		mm : ATL!Module
	to
		gg : Gremlin!GremlinScript(
			name <- mm.name,
			instructions <- Sequence{thisModule.module2graphFinalVar(mm)}
				->union(mm.getHelpers())
				->union(mm.getLazyRules())
				->union(mm.getMatchedRules())
				->append(thisModule.module2closeCall(mm))
		)
}

-- Creates the final variable containing the graph helper
-- This instruction is needed to make it visible inside closures
lazy rule module2graphFinalVar {
	from
		mm : ATL!Module
	to
		inVar : Gremlin!VariableDeclaration (
			name <- 'gHelper',
			value <- varAccess,
			final <- true
		),
		varAccess : Gremlin!VariableAccess (
			name <- thisModule.transformationHelperBinding	
		)
}

lazy rule module2closeCall {
	from
		mm : ATL!Module
	to
		gHelperAccess: Gremlin!VariableAccess (
			name <- 'gHelper',
			nextElement <- closeCall
		),
		closeCall : Gremlin!CustomMethodCall (
			name <- 'close'
			-- TODO multiple out types
			--params <- Sequence{inVar, targetPatternLiteral, typeLiteral, mmNsURILiteral, resourceNameLiteral}
		)
}

rule globalHelper2function {
	from
		hh : ATL!Helper (not hh.hasContext())
	to
		ff : Gremlin!MethodDeclaration(
			name <- hh.getName(),
			parameters <- Sequence{},
			instructions <- hh.getFirstInstruction()
		)
}

-- Translates a matched rule that does not define a guard into a sequence of steps.
-- Each rule is mapped to an allInstances call that retrieves all the instances of its
-- matched EClassifier, and a TransformStep that contains the core of the rule itself.
-- <p>
-- Rule content includes (i) the transformation of out pattern elements, (ii) a resolveProxy call
-- which is responsible of resolving the proxy links created during the transformation, and (iii)
-- the transformation of the bindings themselves.
rule matchedRule2transform {
	from
		mm : ATL!MatchedRule (
			-- We don't want to match lazy rules here
			mm.oclIsTypeOf(ATL!MatchedRule)
			and not(mm.isAbstract)
		)
	to
		varAccess : Gremlin!VariableAccess(
			name <- 'g',
			nextElement <- allOfTypeStep
		),
		allOfTypeStep : Gremlin!CustomStep(
			name <- 'allOfKind',
			params <- typeLiteral,
			nextElement <- transform
		),
		typeLiteral : Gremlin!StringLiteral(
			value <- mm.getMatchedType().name	
		),
		transform : Gremlin!TransformStep(
			closure <- transformClos,
			nextElement <- iterateCall
		),
		transformClos : Gremlin!Closure(
			instructions <- Sequence{}
				.append(thisModule.createDefForIt(mm.inPattern.elements->first()))
				.union(mm.outPattern.elements)
				-- only resolve the first one, resolving others is related to resolveTemp, which is not 
				-- supported yet
				.append(thisModule.createResolveProxyCall(mm))
				.union(mm.outPattern.elements->collect(e | e.bindings))
		),
		iterateCall : Gremlin!CustomMethodCall(
			name <- 'iterate'	
		)
}

rule lazyRule2transform {
	from 
		s : ATL!LazyMatchedRule
	to
		f : Gremlin!MethodDeclaration (
			name <- s.name,
			parameters <- Sequence{s.inPattern.elements->first().varName},
			instructions <- Sequence{}
				.union(s.outPattern.elements)
				.append(thisModule.createResolveProxyCall(s))
				.union(s.outPattern.elements->collect(e | e.bindings))
				.append(ret)
		),
		ret : Gremlin!ReturnStatement (
			value <- s.outPattern.elements->first().varName
		)
}

-- Translates a matched rule that defines a guard into a sequence of steps.
-- The OCL guard is translated into a FilterStep that filters allInstances result
-- according to the guard.
rule matchedRuleWithGuard2transform extends matchedRule2transform {
	from
		mm : ATL!MatchedRule (not mm.getGuardFirstInstruction().oclIsUndefined())
	to
		varAccess : Gremlin!VariableAccess(),
		allOfTypeStep : Gremlin!CustomStep(
			nextElement <- filter	
		),
		filter : Gremlin!FilterStep(
			closure <- clos,
			nextElement <- transform
		),
		clos : Gremlin!Closure(
			instructions <- Sequence{thisModule.createDefForIt(mm.inPattern.elements->first())}.append(mm.getGuardFirstInstruction())
		)
}

rule outPatternElement2instructions {
	from
		pp : ATL!OutPatternElement
	to
		var : Gremlin!VariableDeclaration (
			name <- pp.varName,
			value <- gHelperAccess
		),
		gHelperAccess: Gremlin!VariableAccess (
			name <- 'gHelper',
			nextElement <- createCall
		),
		createCall : Gremlin!CustomMethodCall (
			name <- 'createElement',
			-- TODO multiple out types
			params <- Sequence{inVar, targetPatternLiteral, typeLiteral, mmNsURILiteral, resourceNameLiteral}
		),
		inVar : Gremlin!VariableAccess (
			name <- pp.refImmediateComposite().refImmediateComposite().inPattern.elements->first().varName	
		),
		targetPatternLiteral : Gremlin!StringLiteral (
			value <- pp.varName	
		),
		typeLiteral : Gremlin!StringLiteral (
			value <- pp.type.name	
		),
		mmNsURILiteral : Gremlin!StringLiteral (
			value <- thisModule.getTargetEClassFromString(pp.type.name).ePackage.nsURI	
		),
		resourceNameLiteral : Gremlin!StringLiteral (
			value <- thisModule.resourceName	
		)
}

rule attributeBinding2instruction {
	from
		bb : ATL!Binding (bb.isAttributebinding())
	to
		vaAccess : Gremlin!VariableAccess (
			name <- bb.getBindedElement(),
			nextElement <- prop
		),
		prop : Gremlin!CustomStep(
			name <- 'setAtt',
			params <- Sequence{attNameLiteral, bb.value.getFirstInstruction()}
		),
		attNameLiteral : Gremlin!StringLiteral(
			value <- bb.propertyName	
		)
}

rule referenceBinding2instruction {
	from
		bb : ATL!Binding (bb.isReferenceBinding())
	to
		-- Generate the ternary operation that creates the link / plink
		gAccess : Gremlin!VariableAccess (
			name <- 'gHelper',
			nextElement <- linkRefCall
		),
		linkRefCall : Gremlin!CustomMethodCall (
			name <- 'linkReference',
			params <- Sequence{bindedElVarAccess, bb.value.getFirstInstruction(), propSR, oppositeLiteral, containmentLiteral}
		),
		bindedElVarAccess : Gremlin!VariableAccess (
			name <- bb.getBindedElement()	
		),
		propSR : Gremlin!StringLiteral (
			value <- bb.propertyName	
		),
		oppositeLiteral : Gremlin!StringLiteral (
			value <- bb.feature.getOpposite()
		),
		containmentLiteral : Gremlin!BooleanLiteral (
			value <- bb.outPatternElement.type.toPlatform.eAllStructuralFeatures->any(e |
					e.name = bb.propertyName
				).containment	
		)
}


lazy rule createDefForIt {
	from
		ss : ATL!SimpleInPatternElement
	to
		dd : Gremlin!VariableDeclaration(
			name <- ss.varName,
			value <- closIt
		),
		closIt : Gremlin!ClosureIt()
}

lazy rule createDefForVarIterator {
	from
		ss :  ATL!Iterator
	to
		vd : Gremlin!VariableDeclaration(
			name <- ss.varName,
			value <- fi
		),
		fi : Gremlin!ClosureIt()
}

lazy rule createResolveProxyCall {
	from
		mm : ATL!MatchedRule
	to
		gHelperAccess : Gremlin!VariableAccess (
			name <- 'gHelper',
			nextElement <- resProxyCall
		),
		resProxyCall : Gremlin!CustomMethodCall (
			name <- 'resolveProxies',
			params <- Sequence{sourceVarAccess, targetVarAccess}
		),
		sourceVarAccess : Gremlin!VariableAccess (
			name <- mm.inPattern.elements->first().varName	
		),
		targetVarAccess : Gremlin!VariableAccess (
			name <- mm.outPattern.elements->first().varName
		)
}