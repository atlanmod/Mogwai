-- @path ATL=/org.eclipse.m2m.atl.common/org/eclipse/m2m/atl/common/resources/ATL.ecore
-- @path Gremlin=/fr.inria.atlanmod.mogwai.gremlin/model/gremlin.ecore

-- Operations computing a value (collection or not) from a collection
-- transformations from OCL to Gremlin
-- Covered features are:
-- 	Complex collection operations (operations that necessitate variables to store intermediate
--	results and built-in function calls to compute the operation results)
--		Global variable creation (to store intermediate results)
--		Variable filling
--		Function definition handeling the actual operation (union, intersection)
--		Function call to perform the actual operation (union, intersection)
--	Operations returning a collection value
--		Collection Cast operations (asSet, asOrderedSet, asBag and asSequence)
--		Select operations
--		Reject operations
--		Collect operations (see rule comments for details)
--		Excluding operations
--		Including operations
--	Operation returning a non collection value
--		Excludes operations				X
--		ExcludesAll operations			X
--		Includes operations				X
--		IncludesAll operations			X
--		Exists operations				X
--		ForAll operations				X
--		Size operations					X (not for String)
--		IsEmpty operations				X
--		First operations				X

-- Coding Guidelines
--		Each operation returning a collection have to be transformed
--		to a step chain that ends with a lastColStep (needed by collection
--		operations that use resolveTemp to set previousReference)
--		Operations returning another type should not be transformed to 
--		a step chain ending with lastColStep (to avoid debugging error)

-- Author AtlanMod - Inria

module atlCollectionOperations;

create OUT: Gremlin from IN: ATL;

uses common;


--
-- Complex collection operations
--


-- Create global variable to store 'left' intermediate results in collection operations.
-- Left results are the results of the computation of the source expression of the collection
-- operation.
-- Intermediate results are computed for each operation involving two collections
-- and returning a third collection (union, intersection, collection difference).
--lazy rule collectionOperation2metaLeft {
--	from
--		collectionOperation : OCL!OperationCallExp
--	to
--		metaUnionVar : Gremlin!VariableDeclaration (
--			name <- 'collection' + thisModule.getCollectionOperationIndex(collectionOperation) + 'Left',
--			value <- col
--		),
--		col : Gremlin!CollectionDefinition ()
--}

-- Create global variable to store 'right' intermediate results in collection operations.
-- Right results are the results of the computation of the argument expression of the collection
-- operation.
-- Intermediate results are computed for each operation involving two collections
-- and returning a third collection (union, intersection, collection difference).
--lazy rule collectionOperation2metaRight {
--	from
--		collectionOperation : OCL!OperationCallExp
--	to
--		metaUnionVar : Gremlin!VariableDeclaration(
--			name <- 'collection' + thisModule.getCollectionOperationIndex(collectionOperation) + 'Right',
--			value <- col
--		),
--		col : Gremlin!CollectionDefinition()
--}

-- Transforms complex collection operations (unions, intersections) into fill steps
-- to store intermediate results into dedicated variables.
-- The transformation that generates the function that performs the operation is called lazyly 
-- at the beginning of the transformation (@see unionMetaMethod and @see intersectionMetaMethod).
-- The transformation that generates the function call that actually performs the operation
-- is called lazyly (@see union2instruction and @see intersection2instruction).
--rule complexCollectionOperation2steps {
--	from
--		oclComplexCollectionOperation : OCL!OperationCallExp(
--			oclComplexCollectionOperation.isComplexCollectionOperation()
--		)
--	to
--		gremlinIdentityStepLeftSide : Gremlin!IdentityStep(
--			nextElement <- gremlinFillStepLeftSide,
--			previousElement <- thisModule.resolveTemp(
--				oclComplexCollectionOperation.source,'lastColStep'
--			)
--		),
--		gremlinFillStepLeftSide : Gremlin!FillStep(
--			instruction <- gremlinVariableAccessLeftSide
--		),
--		gremlinVariableAccessLeftSide : Gremlin!VariableAccess(
--			name <- oclComplexCollectionOperation.source.getCollectionVariableName()
--		),
--		gremlinIdentityStepRightSide : Gremlin!IdentityStep(
--			nextElement <- gremlinFillStepRightSide,
--			previousElement <- thisModule.resolveTemp(
--				oclComplexCollectionOperation.argument->first(),'lastColStep'
--			)
--		),
--		gremlinFillStepRightSide : Gremlin!FillStep(
--			instruction <- gremlinVariableAccessRightSide	
--		),
--		gremlinVariableAccessRightSide : Gremlin!VariableAccess(
--			name <- oclComplexCollectionOperation.argument->first().getCollectionVariableName()	
--		)
--}

-- Creates the function that performs an union of 2 collections.
-- Generated function takes two collection parameters and performs
-- the union with an addAll method call.
--lazy rule unionMetaMethod {
--	from
--		oclUnion : OCL!OperationCallExp
--	to
--		computeUnion : Gremlin!MethodDeclaration(
--			name <- 'computeUnion',
--			parameters <- Sequence{'c1','c2'},
--			instructions <- Sequence{unionInstruction1,unionInstruction2}
--		),
--		unionInstruction1 : Gremlin!VariableAccess(
--			name <- 'c1',
--			nextElement <- unionAddAllCall
--		),
--		unionAddAllCall : Gremlin!AddAllCall(
--			value <- unionV2	
--		),
--		unionV2 : Gremlin!VariableAccess(
--			name <- 'c2'	
--		),
--		unionInstruction2 : Gremlin!VariableAccess(
--			name <- 'c1'	
--		)
--}

-- Creates the function that performs an intersection of 2 collections.
-- Generated function takes two collection parameters and performs
-- the intersection with a retainAll method call.
--lazy rule intersectionMetaMethod {
--	from
--		oclUnion : OCL!OperationCallExp
--	to
--		computeIntersection : Gremlin!MethodDeclaration(
--			name <- 'computeIntersection',
--			parameters <- Sequence{'c1','c2'},
--			instructions <- Sequence{intersectionInstruction1,intersectionInstruction2}
--		),
--		intersectionInstruction1 : Gremlin!VariableAccess(
--			name <- 'c1',
--			nextElement <- intersectionRetainAllCall
--		),
--		intersectionRetainAllCall : Gremlin!RetainAllCall(
--			value <- intersectionV2	
--		),
--		intersectionV2 : Gremlin!VariableAccess(
--			name <- 'c2'	
--		),
--		intersectionInstruction2 : Gremlin!VariableAccess(
--			name <- 'c1'	
--		)
--}

-- Abstract rule to create complex collection operation call.
-- Sub-rules have to redefine the guard by selecting the operation to
-- generate a function from. Collection methodCall should also be redefine with
-- a concrete subtype of MethodCall.
--lazy abstract rule collectionOperation2instruction {
--	from
--		collectionOperation : OCL!OperationCallExp (
--			collectionOperation.isComplexCollectionOperation()
--		)
--	to
--		collectionMethodCall : Gremlin!MethodCall(
--			nextElement <- idStep	
--		),
--		variableAccessLeft : Gremlin!VariableAccess(
--			name <- collectionOperation.source.getCollectionVariableName()	
--		),
--		variableAccessRight : Gremlin!VariableAccess(
--			name <- collectionOperation.argument->first().getCollectionVariableName()	
--		),
--		idStep : Gremlin!IdentityStep(
--			nextElement <- collectionOperation.getComposite()
--		)
--}

-- Creates a union method call to perform the union operation.
--lazy rule union2instruction extends collectionOperation2instruction {
--	from
--		collectionOperation : OCL!OperationCallExp (
--			collectionOperation.getOpName() = 'union'	
--		)
--	to
--		collectionMethodCall : Gremlin!UnionCall(
--			leftCollection <- variableAccessLeft,
--			rightCollection <- variableAccessRight,
--			cast <- thisModule.collectionType2typeDeclaration(
--				collectionOperation.eType
--			)
--		)
--}

-- Creates an intersection method call to perform the intersection operation.
--lazy rule intersection2instruction extends collectionOperation2instruction {
--	from
--		collectionOperation : OCL!OperationCallExp (
--			collectionOperation.getOpName() = 'intersection'	
--		)
--	to
--		collectionMethodCall : Gremlin!IntersectionCall(
--			leftCollection <- variableAccessLeft,
--			rightCollection <- variableAccessRight,
--			cast <- thisModule.collectionType2typeDeclaration(
--				collectionOperation.eType
--			)
--		)
--}


--
-- Operations returning an OCL collection
--


-- Transforms a Set cast operation into equivalent Gremlin collection cast.
-- Casting is done by a gather step that allow casting of the entire collection. A scatter
-- step is then generated to transform the resulting collection into a step compatible input.
--rule asSet2steps {
--	from
--		oclAsSet : OCL!OperationCallExp(
--			oclAsSet.getOpName() = 'asSet'
--		)
--	to
--		gremlinGather : Gremlin!GatherStep(
--			nextElement <- gremlinTransform
--		),
--		gremlinTransform : Gremlin!TransformStep(
--			closure <- gremlinClosure,
--			nextElement <- lastColStep
--		),
--		gremlinClosure : Gremlin!Closure(
--			instructions <- gremlinClosureIt	
--		),
--		gremlinClosureIt : Gremlin!ClosureIt(
--			cast <- gremlinSetDecl	
--		),
--		gremlinSetDecl : Gremlin!SetDeclaration(),
--		lastColStep : Gremlin!ScatterStep(
--			nextElement <- oclAsSet.getComposite()
--		)
--}

-- Transforms an OrderedSet cast operation into equivalent Gremlin collection cast.
-- Casting is done by a gather step that allow casting of the entire collection. A scatter
-- step is then generated to transform the resulting collection into a step compatible input.
--rule asOrderedSet2steps {
--	from
--		oclAsOrderedSet : OCL!OperationCallExp(
--			oclAsOrderedSet.getOpName() = 'asOrderedSet'
--		)
--	to
--		gremlinGather : Gremlin!GatherStep(
--			nextElement <- gremlinTransform
--		),
--		gremlinTransform : Gremlin!TransformStep(
--			closure <- gremlinClosure,
--			nextElement <- lastColStep
--		),
--		gremlinClosure : Gremlin!Closure(
--			instructions <- gremlinClosureIt
--		),
--		gremlinClosureIt : Gremlin!ClosureIt(
--			cast <- gremlinSortedSetDecl	
--		),
--		gremlinSortedSetDecl : Gremlin!SortedSetDeclaration(),
--		lastColStep : Gremlin!ScatterStep(
--			nextElement <- oclAsOrderedSet.getComposite()	
--		)
--}

-- Transforms a Bag cast operation into equivalent Gremlin collection cast.
-- Note: Mogwaï vO.1 handles Bags and Sequences with Lists, which are the default Groovy collections.
-- Bags and Sequence casts does not need a particular transformation and are simply mapped to an identity step
-- to transform them into step compatible inputs.
--rule asBag2steps {
--	from
--		oclAsBag : OCL!OperationCallExp(
--			oclAsBag.getOpName() = 'asBag'
--		)
--	to
--		lastColStep : Gremlin!IdentityStep(
--			nextElement <- oclAsBag.getComposite()	
--		)
--}

-- Transforms a Sequence cast operation into equivalent Gremlin collection cast.
-- Note: Mogwaï vO.1 handles Bags and Sequences with Lists, which are the default Groovy collections.
-- Bags and Sequence casts does not need a particular transformation and are simply mapped to an identity step
-- to transform them into step compatible inputs.
--rule asSequence2steps {
--	from
--		oclAsSequence : OCL!OperationCallExp(
--			oclAsSequence.getOpName() = 'asSequence'
--		)
--	to
--		lastColStep : Gremlin!IdentityStep(
--			nextElement <- oclAsSequence.getComposite()
--		)
--}

--helper context OCL!IteratorExp def : canContainEmptyProp() : Boolean = false;


-- Transforms a select operation into equivalent Gremlin filter step.
-- Iterator variable is mapped into a VariableDeclaration to handle nested selections
-- (Groovy closure iterator are accessible through the variable 'it', creating colisions
-- in case of nested closures).
-- Select body is transformed into a Groovy closure applied on the filter.
--rule select2steps {
--	from
--		oclSelect : OCL!IteratorExp (oclSelect.getOpName() = 'select' and not(oclSelect.canContainEmptyProp()))
--	to
--		lastColStep : Gremlin!FilterStep (
--			closure <- gremlinClosure,
--			nextElement <- oclSelect.getComposite()
--		),
--		gremlinClosure : Gremlin!Closure(
--			instructions <- OrderedSet{}
--				.append(
--					-- Transform the iterator into a variable definition
--					thisModule.varIterator2def(oclSelect.iterator.first())
--				)
--				.append(
--					-- Add the transformed body
--					oclSelect.body.getFirstInstruction()
--				)	
--		)
--}

--rule selectEmpty2steps {
--	from
--		oclSelect : OCL!IteratorExp (oclSelect.getOpName() = 'select' and oclSelect.canContainEmptyProp())
--	to
--		lastColStep : Gremlin!FilterStep (
--			--closure <- gremlinClosure,
--			nextElement <- oclSelect.getComposite()
--		)--,
--		--gremlinClosure : Gremlin!Closure(
--		--	instructions <- OrderedSet{}
--		--		.append(
--		--			thisModule.varIterator2def(oclSelect.iterator.first())	
--		--		)
--		--		.append(
--		--			andExp	
--		--		)
--		--),
--		--andExp : Gremlin!AndExpression(
--		--	left <- thisModule.emptyChecking(oclSelect.getEmptyProps()->first()),
--		--	right <- oclSelect.body.getFirstInstruction()
--		--)
--}

-- Transforms a reject operation into equivalent Gremlin filter step.
-- Iterator variable is mapped into a VariableDeclaration to handle nested selections
-- (Groovy closure iterator are accessible through the variable 'it', creating colisions
-- in case of nested closures).
-- Reject body is transformed into a Groovy closure applied on the filter. The boolean
-- condition is preceded by a NotExpression to handle the rejection.
--rule reject2steps {
--	from
--		oclReject : OCL!IteratorExp (oclReject.getOpName() = 'reject')
--	to
--		lastColStep : Gremlin!FilterStep (
--			closure <-  gremlinClosure,
--			nextElement <- oclReject.getComposite()
--		),
--		gremlinClosure : Gremlin!Closure (
--			instructions <- OrderedSet{}
--			.append(
--				-- Transform the iterator into a variable definition
--				thisModule.varIterator2def(oclReject.iterator.first())
--			)
--			.append(
--				-- Add the negation expression that store the transformed body
--				gremlinNotExpression
--			)
--		),
--		gremlinNotExpression : Gremlin!NotExpression (
--			exp <- oclReject.body.getFirstInstruction()
--		)
--}

-- Transforms a collect operation into Gremlin identity step.
-- Collect operations does not corresponds to a Gremlin concept but to the entire graph
-- traversal approach: each navigation step in a Gremlin traversal is a collection.
-- The helper @see{common::getComposite} returns the body of a collect operations instead of 
-- the OperationCallExp. This rule maps the collect operation returned by the helper 
-- from the last OCL expression in the body into an IdentityStep to make it available as a step
-- input (in case the collect body is not transformed to a Gremlin step).
--rule collect2steps {
--	from 
--		oclCollect : OCL!IteratorExp (oclCollect.getOpName() = 'collect')
--	to
--		transformStep : Gremlin!TransformStep(
--			closure <- closure,
--			nextElement <- lastColStep
--		),
--		lastColStep : Gremlin!ScatterStep(
--			nextElement <- oclCollect.getComposite()	
--		),
--		closure : Gremlin!Closure(
--			instructions <- OrderedSet{}
--				.append(
--					-- Transform the iterator into a variable definition
--					thisModule.varIterator2def(oclCollect.iterator.first())
--				)
--				.append(
--					-- Add the transformed body
--					oclCollect.body.getFirstInstruction()
--				)
--		)
--}

-- Transforms an excluding operation into equivalent Gremlin except step.
-- Excepted elements are computed from excluding argument and put in a vector.
--rule excluding2steps {
--	from
--		oclExcluding : OCL!OperationCallExp (oclExcluding.getOpName() = 'excluding')
--	to
--		lastColStep : Gremlin!ExceptStep (
--			collection <- gremlinCollectionDefinition,
--			nextElement <- oclExcluding.getComposite()
--		),
--		gremlinCollectionDefinition : Gremlin!CollectionDefinition(
--			values <- oclExcluding.argument.first(),
--			type <- gremlinListDeclaration
--		),
--		gremlinListDeclaration : Gremlin!ListDeclaration()
--}

-- Transforms an including operation into equivalent Gremlin transform step.
-- Element addition is performed by a Groovy shift, that push values into a collection.
-- Results are then processed through the scatter step that transforms them into step compatible
-- inputs.
--rule including2steps {
--	from
--		including : OCL!OperationCallExp (including.getOpName() = 'including')
--	to
--		gather : Gremlin!GatherStep(
--			nextElement <- transform	
--		),
--		transform : Gremlin!TransformStep(
--			closure <- clos,
--			nextElement <- lastColStep
--		),
--		clos : Gremlin!Closure (
--			instructions <- shift
--		),
--		shift : Gremlin!LeftShiftExpression(
--			left <- it,
--			right <- including.argument.first()
--		),
--		it : Gremlin!ClosureIt(),
--		lastColStep : Gremlin!ScatterStep(
--			nextElement <- including.getComposite()	
--		)
--}


--
-- Operations returning a non OCL collection
--


-- Transforms an excludes operation into equivalent Gremlin retain step.
rule excludes2steps {
	from
		oclExcludes : ATL!CollectionOperationCallExp (oclExcludes.getOpName() = 'excludes')
	to
		gremlinRetain : Gremlin!RetainStep (
			collection <- gremlinCollectionDefinition,
			nextElement <- gremlinToListCall
		),
		gremlinToListCall : Gremlin!ToListCall (
			nextElement <- gremlinIsEmptyCall	
		),
		gremlinIsEmptyCall : Gremlin!IsEmptyCall (
				
		),
		gremlinCollectionDefinition : Gremlin!CollectionDefinition (
			values <- oclExcludes.arguments->first().getFirstInstruction(),
			type <- gremlinListDeclaration
		),
		gremlinListDeclaration : Gremlin!ListDeclaration(
			
		)
}


-- Transforms an excludesAll operation into equivalent Gremlin retain step.
-- Retained values are transformed from the exludesAll argument (expression or literal).
-- There is no need to generate a vector since the argument is already a collection.
-- Results of the retain step are transformed into a list and the isEmpty method
-- is called to return corresponding the boolean result.
rule excludesAll2steps {
	from
		oclExcludesAll : ATL!OperationCallExp (oclExcludesAll.getOpName() = 'excludesAll')
	to
		gremlinRetain : Gremlin!RetainStep (
			collection <- oclExcludesAll.arguments->first().getFirstInstruction(),
			nextElement <- gremlinToListCall
		),
		gremlinToListCall : Gremlin!ToListCall (
			nextElement <- gremlinIsEmptyCall	
		),
		gremlinIsEmptyCall : Gremlin!IsEmptyCall (
			
		)
}

-- Transforms an includes operation into equivalent Gremlin transform step.
rule includes2steps {
	from
		oclIncludes : ATL!OperationCallExp (oclIncludes.getOpName() = 'includes')
	to
		gremlinGather : Gremlin!GatherStep (
			nextElement <- gremlinTransform	
		),
		gremlinTransform : Gremlin!TransformStep (
			closure <- gremlinClosure,
			nextElement <- gremlinNextCall
		),
		gremlinClosure: Gremlin!Closure (
			instructions <- gremlinIterator	
		),
		gremlinIterator : Gremlin!ClosureIt (
			nextElement <- gremlinContainsCall	
		),
		gremlinContainsCall : Gremlin!ContainsCall (
			value <- oclIncludes.arguments->first().getFirstInstruction()	
		),
		gremlinNextCall : Gremlin!NextCall(
			
		)
}

-- Transforms an includesAll operation into equivalent Gremlin transformation step.
rule includesAll2steps {
	from
		oclIncludesAll : ATL!CollectionOperationCallExp (oclIncludesAll.getOpName() = 'includesAll')
	to
		gremlinGather : Gremlin!GatherStep (
			nextElement <- gremlinTransform	
		),
		gremlinTransform : Gremlin!TransformStep (
			closure <- gremlinClosure,
			nextElement <- gremlinNextCall
		),
		gremlinClosure : Gremlin!Closure (
			instructions <- gremlinIterator	
		),
		gremlinIterator : Gremlin!ClosureIt (
			nextElement <- gremlinContainsAllCall	
		),
		gremlinContainsAllCall : Gremlin!ContainsAllCall (
			value <- oclIncludesAll.arguments->first().getFirstInstruction()	
		),
		gremlinNextCall : Gremlin!NextCall (
--			nextElement <- oclIncludesAll.getComposite()	
		)
}

-- Transforms a simple exists operation (withtout iterator) into equivalent Gremlin filter step.
rule simpleExists2steps {
	from
		oclExists : ATL!CollectionOperationCallExp (oclExists.getOpName() = 'exists')
	to
		gremlinFilterStep : Gremlin!FilterStep (
			closure <-  gremlinClosure,
			nextElement <- gremlinHasNext
		),
		gremlinClosure : Gremlin!Closure (
			instructions <- OrderedSet{}
				.append(
					-- Add the transformed body
					oclExists.arguments->first().getFirstInstruction()
				)
		),
		gremlinHasNext : Gremlin!HasNextCall(
			
		)
}

-- Transforms a complex exists operation (with an iterator) into equivalent Gremlin filter step.
rule complexExists2steps {
	from
		oclExists : ATL!IteratorExp (oclExists.getOpName() = 'exists')
	to
		gremlinFilterStep : Gremlin!FilterStep (
			closure <- gremlinClosure,
			nextElement <- gremlinHasNext
		),
		gremlinClosure : Gremlin!Closure (
			instructions <- OrderedSet{}
				.append(
					thisModule.createDefForIt(oclExists.iterators->first())	
				)
				.append(
					oclExists.body.getFirstInstruction()
				)
		),
		gremlinHasNext : Gremlin!HasNextCall (
				
		)
}

-- Transforms a simple forAll operation (without iterator) into equivalent Gremlin filter step.
rule simpleForAll2steps {
	from
		oclForAll : ATL!CollectionOperationCallExp (oclForAll.getOpName() = 'forAll')
	to
		gremlinFilter : Gremlin!FilterStep (
			closure <- gremlinClosure,
			nextElement <- gremlinToListCall
		),
		gremlinClosure : Gremlin!Closure (
			instructions <- OrderedSet{}
				.append(gremlinNotExpression)
		),
		gremlinNotExpression : Gremlin!NotExpression (
			exp <- oclForAll.arguments->first().getFirstInstruction()
		),
		gremlinToListCall : Gremlin!ToListCall (
			nextElement <- gremlinIsEmptyCall	
		),
		gremlinIsEmptyCall : Gremlin!IsEmptyCall (
				
		)
}

rule complexForAll2steps {
	from
		oclForAll : ATL!IteratorExp (oclForAll.getOpName() = 'forAll')
	to
		gremlinFilter : Gremlin!FilterStep (
			closure <- gremlinClosure,
			nextElement <- gremlinToListCall
		),
		gremlinClosure : Gremlin!Closure (
			instructions <- OrderedSet{}
				.append(
					thisModule.createDefForIt(oclForAll.iterators->first())	
				)
				.append(
					gremlinNotExpression
				)
		),
		gremlinNotExpression : Gremlin!NotExpression (
			exp <- oclForAll.body.getFirstInstruction()
		),
		gremlinToListCall : Gremlin!ToListCall (
			nextElement <- gremlinIsEmptyCall	
		),
		gremlinIsEmptyCall : Gremlin!IsEmptyCall (
				
		)
}


--rule forAll2steps {
--	from
--		oclForAll : OCL!IteratorExp (oclForAll.getOpName() = 'forAll')
--	to
--		gremlinFilter : Gremlin!FilterStep(
--			closure <- gremlinClosure,
--			nextElement <- gremlinToListCall
--		),
--		gremlinClosure : Gremlin!Closure(
--			instructions <- OrderedSet{}
--				.append(
--					thisModule.varIterator2def(oclForAll.iterator.first())
--				).append(
--					gremlinNotExpression
--				)
--		),
--		gremlinNotExpression : Gremlin!NotExpression(
--			exp <- oclForAll.body.getFirstInstruction()	
--		),
--		gremlinToListCall : Gremlin!ToListCall(
--			nextElement <- gremlinIsEmptyCall	
--		),
--		gremlinIsEmptyCall : Gremlin!IsEmptyCall(
--			
--		)
--}

-- Transforms a size operation into equivalent Gremlin count call.
-- TODO Handle size on String
rule size2steps {
	from
		oclSize : ATL!CollectionOperationCallExp(oclSize.getOpName() = 'size')
	to
		gremlinCountCall : Gremlin!CountCall ()
}

-- TODO update it (quick fix for a specific transfo)
--rule stringSize2steps {
--	from
--		oclSize : OCL!OperationCallExp ((oclSize.getOpName() = 'size'))
--		--	and oclSize.getComposite().oclIsTypeOf(OCL!PropertyCallExp)
--		--	and if(oclSize.getComposite() <> OclUndefined) then (oclSize.getComposite().eType.name = 'String') else false endif)
--	to
--		gremlinSizeCall : Gremlin!SizeCall()
--}

-- Transforms an isEmpty operation into equivalent Gremlin method calls.
-- IsEmpty method is called on the step collection.
rule isEmpty2steps {
	from
		oclIsEmpty : ATL!CollectionOperationCallExp (oclIsEmpty.getOpName() = 'isEmpty')
	to
		gremlinToListCall : Gremlin!ToListCall(
			nextElement <- gremlinIsEmptyCall
		),
		gremlinIsEmptyCall : Gremlin!IsEmptyCall(
			nextElement <- oclIsEmpty.getComposite()
		)
}

-- Transforms a first operation into equivalent Gremlin method calls.
-- First method is called on the step collection.
rule first2steps {
	from
		oclFirst : ATL!CollectionOperationCallExp(oclFirst.getOpName() = 'first')
	to
		gremlinFirstCall : Gremlin!FirstCall(
			nextElement <- oclFirst.getComposite()
		)
}

--rule any2steps {
--	from
--		oclAny : OCL!IteratorExp(oclAny.getOpName() = 'any')
--	to
--		gremlinFilter : Gremlin!FilterStep(
--			nextElement <- firstStep,
--			closure <- gremlinClosure
--		),
--		gremlinClosure : Gremlin!Closure(
--			instructions <- OrderedSet{}
--				.append(
--					thisModule.varIterator2def(oclAny.iterator.first())
--				).append(
--					oclAny.body.getFirstInstruction()
--				)
--		),
--		firstStep : Gremlin!FirstCall( -- first does not have the same semantic as any
--			nextElement <- oclAny.getComposite()
--		)
--}