-- @nsURI ATL=http://www.eclipse.org/gmt/2005/OCL
-- @path ATL=/org.eclipse.m2m.atl.common/org/eclipse/m2m/atl/common/resources/ATL.ecore
-- @path Gremlin=/fr.inria.atlanmod.mogwai.gremlin/model/gremlin.ecore

module atlEmbeddedOcl2Gremlin;

create OUT: Gremlin from IN: ATL;

helper context ATL!NavigationOrAttributeCallExp def: feature : Ecore!EStructuralFeature =
	let type : OclAny = self.source.inferredType in
	if type.oclIsUndefined() then
		('error: cannot infer type of expression @' + self.source.location).debug()
	else
		type.eAllStructuralFeatures->any(e | e.name = self.name)
	endif;

helper context ATL!NavigationOrAttributeCallExp def : isAttributeNavigation() : Boolean = 
	self.feature.oclIsKindOf(SourceEcore!EAttribute)
;

helper context ATL!NavigationOrAttributeCallExp def : isReferenceNavigation() : Boolean = 
	self.feature.oclIsKindOf(SourceEcore!EReference)
;
	

rule varExp2steps {
	from
		varExp : ATL!VariableExp
	to
		va : Gremlin!VariableAccess(
			name <- varExp.referredVariable.varName,
			nextElement <- varExp.getComposite()
		)
}

rule attributeNavigationOrAttributeCallExp2steps {
	from
		nav : ATL!NavigationOrAttributeCallExp (nav.isAttributeNavigation())
	to
		prop : Gremlin!CustomStep(
			name <- 'getAtt',
			params <- Sequence{attNameLiteral},
			nextElement <- nav.getComposite()
		),
		attNameLiteral : Gremlin!StringLiteral(
			value <- nav.name	
		)
}

rule referenceNavigationOrAttributeCallExp2steps {
	from
		nav : ATL!NavigationOrAttributeCallExp (nav.isReferenceNavigation())
	to
		getRef : Gremlin!CustomStep (
			name <- 'getRef',
			params <- Sequence{refLabelLiteral},
			nextElement <- idStep
		),
		refLabelLiteral : Gremlin!StringLiteral (
			value <- nav.name	
		),
		idStep : Gremlin!IdentityStep(
			nextElement <- nav.getComposite()	
		)
}

rule allInstances2steps {
	from
		ai : ATL!OperationCallExp (ai.getOpName() = 'allInstances')
	to
		varAccess : Gremlin!VariableAccess(
			name <- 'g',
			nextElement <- allOfTypeStep
		),
		allOfTypeStep : Gremlin!CustomStep(
			name <- 'allOfType',
			params <- typeLiteral,
			nextElement <- ai.getComposite()
		),
		typeLiteral : Gremlin!StringLiteral(
			value <- ai.source.name
		)
}
