-- @nsURI ATL=http://www.eclipse.org/gmt/2005/OCL
-- @path ATL=/org.eclipse.m2m.atl.common/org/eclipse/m2m/atl/common/resources/ATL.ecore
-- @path Gremlin=/fr.inria.atlanmod.mogwai.gremlin/model/gremlin.ecore

module atlEmbeddedOcl2Gremlin;

create OUT: Gremlin from IN: ATL;

helper context ATL!NavigationOrAttributeCallExp def: feature : Ecore!EStructuralFeature =
	let type : OclAny = self.source.inferredType in
	if type.oclIsUndefined() then
		('error: cannot infer type of expression @' + self.source.location).debug()
	else
		type.eAllStructuralFeatures->any(e | e.name = self.name)
	endif;

helper context ATL!NavigationOrAttributeCallExp def : isAttributeNavigation() : Boolean = 
	self.feature.oclIsKindOf(SourceEcore!EAttribute)
;

helper context ATL!NavigationOrAttributeCallExp def : isReferenceNavigation() : Boolean = 
	self.feature.oclIsKindOf(SourceEcore!EReference)
;

helper context SourceEcore!EReference def : getOpposite() : String =
	if(self.eOpposite.oclIsUndefined()) then
		''
	else
		self.eOpposite.name
	endif
;

helper context SourceEcore!EReference def : isContainer() : Boolean =
	self.container
;

rule varExp2steps {
	from
		varExp : ATL!VariableExp (not varExp.isThisModuleVar())
	to
		va : Gremlin!VariableAccess(
			name <- varExp.referredVariable.varName,
			nextElement <- varExp.getComposite()
		)
}

rule attributeNavigationOrAttributeCallExp2steps {
	from
		nav : ATL!NavigationOrAttributeCallExp (nav.isAttributeNavigation())
	to
		prop : Gremlin!CustomStep(
			name <- 'getAtt',
			params <- Sequence{attNameLiteral},
			nextElement <- nav.getComposite()
		),
		attNameLiteral : Gremlin!StringLiteral(
			value <- nav.name	
		)
}

rule attributeNavigationOrAttributeCallExpLastInMathOperation2steps extends attributeNavigationOrAttributeCallExp2steps {
	from
		nav : ATL!NavigationOrAttributeCallExp (nav.isAttributeNavigation() and (nav.isLastInMathOperation() or nav.isLastInBinding()))
	to
		-- wrap the result into a pipeline to be sure we can call next on it
		-- TODO optimize
		idStep : Gremlin!IdentityStep(
			nextElement <- prop	
		),
		prop : Gremlin!CustomStep(
			nextElement <- nextCall	
		),
		nextCall : Gremlin!NextCall()
}

rule referenceNavigationOrAttributeCallExp2steps {
	from
		nav : ATL!NavigationOrAttributeCallExp (nav.isReferenceNavigation())
	to
		getRef : Gremlin!CustomStep (
			name <- 'getRef',
			params <- Sequence{refLabelLiteral, oppositeLabelLiteral, isContainmentLiteral},
			nextElement <- idStep
		),
		refLabelLiteral : Gremlin!StringLiteral (
			value <- nav.name	
		),
		oppositeLabelLiteral : Gremlin!StringLiteral (
			value <- nav.feature.getOpposite()
		),
		isContainmentLiteral : Gremlin!BooleanLiteral (
			value <- nav.feature.isContainer()
		),
		idStep : Gremlin!IdentityStep(
			nextElement <- nav.getComposite()	
		)
}

rule globalHelperNavigation2steps {
	from
		nav : ATL!NavigationOrAttributeCallExp (
				not nav.isAttributeNavigation() 
				and not nav.isReferenceNavigation()
				and nav.isGlobalHelperInvocation())
	to
		mc : Gremlin!CustomMethodCall (
			name <- nav.name
		)
}

rule allInstances2steps {
	from
		ai : ATL!OperationCallExp (ai.getOpName() = 'allInstances')
	to
		varAccess : Gremlin!VariableAccess(
			name <- 'g',
			nextElement <- allOfTypeStep
		),
		allOfTypeStep : Gremlin!CustomStep(
			name <- 'allOfType',
			params <- typeLiteral,
			nextElement <- ai.getComposite()
		),
		typeLiteral : Gremlin!StringLiteral(
			value <- ai.source.name
		)
}

rule oclIsKindOf2steps {
	from
		ok : ATL!OperationCallExp (ok.getOpName() = 'oclIsKindOf')
	to
		koStep : Gremlin!CustomStep(
			name <- 'isKindOf',
			params <- typeLiteral,
			nextElement <- ok.getComposite()
		),
		typeLiteral : Gremlin!StringLiteral(
			value <- ok.arguments->first().name	
		)
}

rule oclIsKinOf2stepsLastInComparison2steps extends oclIsKindOf2steps {
	from
		ok : ATL!OperationCallExp (ok.getOpName() = 'oclIsKindOf' and ok.isLastInComparison())
	to
		koStep : Gremlin!CustomStep (
			nextElement <- nextCall	
		),
		nextCall : Gremlin!NextCall()
}

rule oclIsTypeOf2steps {
	from
		ot : ATL!OperationCallExp (ot.getOpName() = 'oclIsTypeOf')
	to
		toStep : Gremlin!CustomStep (
			name <- 'isTypeOf',
			params <- typeLiteral,
			nextElement <- ot.getComposite()
		),
		typeLiteral : Gremlin!StringLiteral(
			value <- ot.arguments->first().name	
		)
}

rule oclIsTypeOf2stepsLastInComparison2steps extends oclIsTypeOf2steps {
	from
		ot : ATL!OperationCallExp (ot.getOpName() = 'oclIsTypeOf' and ot.isLastInComparison())
	to
		toStep : Gremlin!CustomStep (
			nextElement <- nextCall	
		),
		nextCall : Gremlin!NextCall()
}
