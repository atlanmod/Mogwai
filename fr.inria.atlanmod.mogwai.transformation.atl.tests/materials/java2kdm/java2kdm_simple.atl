--@atlcompiler atl2006
--Copyright (c) 2009 Mia-Software.
--All rights reserved. This program and the accompanying materials
--are made available under the terms of the Eclipse Public License v1.0
--which accompanies this distribution, and is available at
--http://www.eclipse.org/legal/epl-v10.html
---
--Contributors:
--	  Gabriel BARBIER (Mia-Software) - initial API and implementation
--    Fabien GIQUEL (Mia-Software) - initial API and implementation

--
-- @nsURI kdm=http://www.eclipse.org/MoDisco/kdm/action
-- @nsURI java=http://www.eclipse.org/MoDisco/Java/0.2.incubation/java
--
--Transform Java Models to KDM models

module javaToKdm; -- Module Template
create OUT : kdm from IN : java;

rule ModelToModel{
	from
		src : java!Model
	to
		kdmModel : kdm!CodeModel(
			name <- src.name
			,codeElement <- src.ownedElements->select(e| e.proxy = false)
			,codeElement <- kdmLanguageUnit
		)
		,kdmLanguageUnit : kdm!LanguageUnit(
			name <- 'Common Java datatypes',
			codeElement <- src.orphanTypes->select(e| e.oclIsKindOf(java!PrimitiveType)),
			codeElement <- stringType
		)
		,externalModel : kdm!CodeModel (
			name <- 'externals'
			,codeElement <- src.ownedElements->select(e| e.proxy = true)
			,codeElement <- src.orphanTypes->select(e| not e.oclIsKindOf(java!PrimitiveType))
		)
		,sourcesModel : kdm!InventoryModel (
			name <- 'source references',
			inventoryElement <- src.compilationUnits,
			inventoryElement <- src.archives
		)
		,kdmSegment : kdm!Segment mapsTo src (
			model <- kdmModel
			,model <- externalModel
			,model <- sourcesModel
		)
		,stringType : kdm!StringType (
			name <- 'string'
		)
		
	do {
		thisModule.externalModel <- externalModel;
	}
}

-- Transforms a package declaration into a package
rule PackageToPackage {
	from 
		src:java!Package
	to 
		tgt:kdm!Package(
			name<-src.name
			--get the subpackages owned by the matched package
			,codeElement<-src.ownedPackages
			--adds classes and interfaces
			,codeElement<-src.ownedElements				
		)
}


-- ===================================================== ---
--
-- abstract rule to manage source reference in kdm model
-- in java, corresponding metaclass is ASTNode
-- in kdm, it is AbstractCodeElement (no better choice)
--
-- ===================================================== ---

abstract rule ASTNodeToAbstractCodeElement {
	from src :java!ASTNode
	to tgt :kdm!AbstractCodeElement (
		-- comments
		comment <- src.comments,
		-- source file management
		source <- sourceRef
	)
	,sourceRef : kdm!SourceRef (
		language <- 'java'
		,region <- sourceRegion
	)
	,sourceRegion : kdm!SourceRegion (
		language <- 'java'
		,file <- if (src.originalCompilationUnit.oclIsUndefined()) then
					src.originalClassFile
				else
					src.originalCompilationUnit
				endif
	)
}

abstract rule NamedElementToAbstractCodeElement extends ASTNodeToAbstractCodeElement {
	from src :java!NamedElement
	to tgt :kdm!AbstractCodeElement (
		name <- src.name
	)
}

abstract rule BodyDeclarationToAbstractCodeElement extends NamedElementToAbstractCodeElement {
	from src :java!BodyDeclaration
	to tgt :kdm!AbstractCodeElement (
		-- attributes to store additional information (visibility stays redundant)
		attribute <- if (src.modifier.oclIsUndefined()) then
						Sequence{}
					else
						src.modifier
					endif
		,
		codeRelation <- src.annotations
	)
}

-- See this, collect not mapped, thisModule in ifTrue / ifFalse
abstract rule AbstractTypeDeclarationToDatatype extends BodyDeclarationToAbstractCodeElement {
	from src :java!AbstractTypeDeclaration
	to tgt :kdm!Datatype (
		-- imports
		codeRelation <- 
		if (src.originalCompilationUnit.oclIsUndefined()) then
					Sequence{}
				else
					src.originalCompilationUnit.imports
				endif
		-- inheritance
		,codeRelation <- src.superInterfaces->collect(e | 
			if (src.oclIsTypeOf(java!ClassDeclaration)) then 
				thisModule.CreateImplements(e)
			else
				thisModule.CreateExtends(e)
			endif) -- end collect
		-- annotations
		,
		codeRelation <- src.annotations
		-- TODO use superClass
		-- comments
		,comment <- src.commentsBeforeBody
		,comment <- src.commentsAfterBody
		,comment <- src.comments 
		,comment <- if (src.originalCompilationUnit.oclIsUndefined()
						or not src.refImmediateComposite().oclIsTypeOf(java!Package)) then
					Sequence{}
				else -- top level type declaration -> retrieving CU heading comments
					src.originalCompilationUnit.comments
				endif
	)
}

rule ModifierToAttribute {
	from src : java!Modifier
	to tgt : kdm!Attribute (
			tag <- 'export',
			value <- src.visibility.toString()
					+
					 (if (src.inheritance = #none) then
						''
					 else
					 	' ' + src.inheritance.toString()
					 endif)
					 
		)
}

-- ===================================================== ---
--  Rules for the classes
--  This part gives all the transformations for the classes of a Java program
-- the transformations being quite different when the considered class is generic (Java meaning)
-- ===================================================== ---

-- On hold (Q2)
-- Transfoms a class declaration into a class unit
rule ClassDeclarationToClassUnit extends AbstractTypeDeclarationToDatatype {
	from src:java!ClassDeclaration (
			src.typeParameters.isEmpty()
	)
--	using{
--		-- For attributes, we have to separate FieldDeclaration and VariableDeclarationFragment usage
--		javaAttributes :java!NamedElement = src.bodyDeclarations->select(e| e.oclIsTypeOf(java!FieldDeclaration))
--			->collect(f| if (f.fragments->isEmpty()) then f else f.fragments endif);	
--	}
	to tgt: kdm!ClassUnit(
		isAbstract <- if src.modifier.oclIsUndefined() then
						OclUndefined
					else
						src.modifier.inheritance = 'abstract'
					endif
		-- attributes
--		,codeElement <- javaAttributes
		-- other elements
		,
		codeElement <- src.bodyDeclarations->select(e | not e.oclIsTypeOf(java!FieldDeclaration))	
	)
	do {
		-- inheritance
--		tgt.codeRelation <- if src.superClass.oclIsUndefined() then
--							Sequence{}
--						else
--							thisModule.CreateExtends(src.superClass)
--						endif;
		
	}
}

-- Transfoms a class declaration into a class unit
rule AnonymousClassDeclarationToClassUnit extends ASTNodeToAbstractCodeElement {
	from src:java!AnonymousClassDeclaration
--	using{
--		-- For attributes, we have to separate FieldDeclaration and VariableDeclarationFragment usage
--		javaAttributes :java!NamedElement = src.bodyDeclarations->select(e| e.oclIsTypeOf(java!FieldDeclaration))
--			->collect(f| if (f.fragments->isEmpty()) then f else f.fragments endif);
--		originalTypeAccess :java!TypeAccess = src.refImmediateComposite().type;
--	}
	to tgt: kdm!ClassUnit(
		name <- 'Anonymous type'
		-- attributes
--		,codeElement <- javaAttributes
		-- other elements
		,codeElement <- src.bodyDeclarations->select(e | not e.oclIsTypeOf(java!FieldDeclaration))
		-- imports
--		,codeRelation <- if (src.originalCompilationUnit.oclIsUndefined()) then
--					Sequence{}
--				else
--					src.originalCompilationUnit.imports
--				endif
		-- inheritance
--		,codeRelation <- if (originalTypeAccess.oclIsUndefined()) then
--							Sequence{}
--						else
--							thisModule.CreateImplementsForTemplated(tgt, originalTypeAccess)
--						endif
			
		-- TODO use superClass
		-- comments
		,comment <- src.comments 
--		,comment <- if (src.originalCompilationUnit.oclIsUndefined()
--						or not src.refImmediateComposite().oclIsTypeOf(java!Package)) then
--					Sequence{}
--				else -- top level type declaration -> retrieving CU heading comments
--					src.originalCompilationUnit.comments
--				endif
	)
}