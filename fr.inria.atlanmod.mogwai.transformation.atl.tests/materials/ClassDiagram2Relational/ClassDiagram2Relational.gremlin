final def gr = g;
final def gHelper = graphHelper;

def metaClass = g.getIndex("metaclasses",Vertex.class)[[name:"Class"]];
def metaClassNode = (metaClass.hasNext() ? metaClass.next() : null);

def metaAttribute = g.getIndex("metaclasses", Vertex.class)[[name:"Attribute"]];
def metaAttributeNode = (metaAttribute.hasNext() ? metaAttribute.next() : null);

def metaTable = g.getIndex("metaclasses",Vertex.class)[[name:"Table"]];
def metaTableNode = metaTable.hasNext() ? metaTable.next() : gHelper.createMetaclass("Table", "ClassDiagram");

def metaColumn = g.getIndex("metaclasses",Vertex.class)[[name:"Column"]];
def metaColumnNode = metaColumn.hasNext() ? metaColumn.next() : gHelper.createMetaclass("Column", "ClassDiagram");


metaClassNode.inE("kyanosInstanceOf").outV.filter{it.name == "Person"}.transform{
	def c = it;
	def out = gHelper.createElement(c, "out", metaTableNode);
	
	gHelper.resolveProxies(c, out);
	
	out.setProperty("name", c.getProperty("name"));
	
	gHelper.isResolvable(c.outE("attr").inV.first()) ? gHelper.link(out, gHelper.resolve(c.outE("attr").inV.first()), "col") : gHelper.pLink(out, c.outE("attr").inV.first(), "col");

	
	// Quick fix to allow NeoEMF access of the created elements, need to be fixed
	gr.addEdge(gr.getVertex('ROOT'), out, "eContents");
}.iterate();

metaAttributeNode.inE("kyanosInstanceOf").outV.transform{
	def a = it;
	def fKey = gHelper.createElement(a, "fKey", metaColumnNode);
	
	gHelper.resolveProxies(a, fKey);
	
	fKey.setProperty("name", a.getProperty("name") + "Id");
}.iterate();
