-- @path OCL=http://www.eclipse.org/ocl/1.1.0/Ecore
-- @path Gremlin=/fr.inria.atlanmod.mogwai.gremlin/model/gremlin.ecore

-- OCL to Gremlin ATL Module

-- Transforms an OCL input model into its representation through the
-- Gremlin metamodel (see fr.inria.atlanmod.ocl2query.gremlin).
-- OCL models are reversed compare to the natural writing :
--		a->collect(b)->select(e | e.oclIsTypeOf(X))
--	produces a model like
--		select(collect(access(a)))
-- While Gremlin syntax and model are both organized in the natural writing 
-- order. The main objective of this transformation is to reverse OCL expression
-- chains to match them in prefixed order.
-- The typical matching is done in 2 parts :
--	- Find the highest object in the considered tree hierarchy
--  - Match this object to a step and associate next step to the container of the object

-- Author AtlanMod - Inria

module ocl2gremlin;

create OUT: Gremlin from IN: OCL;

uses common;

helper context OCL!OCLExpression def : getFirstInstructionCollectionOperation() : OCL!OCLExpression =
	if self.oclIsTypeOf(OCL!OperationCallExp) or self.oclIsTypeOf(OCL!IteratorExp) then
		if Set{'union','intersection'}.includes(self.getOpName()) then
			self
		else
			self.source.getFirstInstructionCollectionOperation()
		endif
	else
		if self.oclIsTypeOf(OCL!VariableExp) or
			self.oclIsKindOf(OCL!LiteralExp) or
			self.oclIsTypeOf(OCL!TypeExp) or
			self.oclIsKindOf(OCL!BooleanLiteralExp) then
			self
		else
			self.source.getFirstInstructionCollectionIntersection()
		endif
	endif
	;

helper context OCL!OCLExpression def : getFirstInstructionInCollectionOperations() : OrderedSet(OCL!OCLExpression) =
	if OCL!OperationCallExp.allInstances()->select(each | Set{'union','intersection'}.includes(each.getOpName())).size() = 0 then
		OrderedSet{}
	else
		thisModule.reverse(OCL!OperationCallExp.allInstances())->select(each | Set{'union','intersection'}.includes(each.getOpName()))->collect(e | OrderedSet{}.append(e.argument.first().getFirstInstructionCollectionOperation())).flatten()
	endif
	;

helper def : reverse(seq : Sequence(OclAny)): Sequence(OclAny) = seq->iterate(e; res : Sequence(OclAny) = Sequence{} | res.prepend(e));

helper context OCL!OCLExpression def : isLastInCollectionOperation() : Boolean =
	if self.refImmediateComposite().oclIsTypeOf(OCL!OperationCallExp) then
		if Sequence{'union','intersection'}.includes(self.refImmediateComposite().getOpName()) then
			true
		else
			false
		endif
	else
		false
	endif
	;

helper context OCL!OCLExpression def : isInCollectionOperationLeftPart() : Boolean =
	self.refImmediateComposite().source = self
	;

helper context OCL!OCLExpression def : getCollectionVariableName() : String =
	let res : String = 'collection' in
		if self.isInCollectionOperationLeftPart() then
			res + thisModule.getCollectionOperationIndex(self.refImmediateComposite()) + 'Left'
		else
			res + thisModule.getCollectionOperationIndex(self.refImmediateComposite()) + 'Right'
		endif
	;

helper context OCL!PropertyCallExp def : isLastInComparison() : Boolean =
	if self.refImmediateComposite().oclIsTypeOf(OCL!OperationCallExp) then
		self.refImmediateComposite().isComparison()
	else
		false
	endif
	;

helper def : getCollectionOperationIndex(op : OCL!OperationCallExp) : Integer =
	if op.getOpName() = 'union' then
		OCL!OperationCallExp.allInstances()->select(each | each.getOpName() = 'union')->indexOf(op)
	else if op.getOpName() = 'intersection' then
		OCL!OperationCallExp.allInstances()->select(each | each.getOpName() = 'intersection')->indexOf(op)
	else
		-1
	endif
	endif
	;


	
-- Creates the Gremlin container (GremlinScript) from
-- the OCL container (Constraint)
-- Meta elements are computed first to generate appropriate variables (for type checking
-- and indices access).
-- The first instruction (i.e the last one in the OCL model) is then retrieved and added to the
-- instruction list.
rule constraint2script {
	from
		cc : OCL!Constraint
	to
		gg : Gremlin!GremlinScript (
			name <- cc.name,
			instructions <- cc.specification.bodyExpression.getUsedTypes()
				->collect(e | thisModule.typeExp2meta(e)).union(
					cc.specification.bodyExpression.getUsedTypes()
				->collect(e | thisModule.typeExp2metaNodes(e))).union(
					let collectionOperations : Sequence(OCL!OperationCallExp) = OCL!OperationCallExp.allInstances()->select(each | Set{'union','intersection'}.includes(each.getOpName())) in
					if collectionOperations.isEmpty() then
						OrderedSet{}
					else
						collectionOperations->collect(e | thisModule.collectionOperation2metaLeft(e)).union(
							collectionOperations->collect(e | thisModule.collectionOperation2metaRight(e))	
						)
						.append(
							if(collectionOperations->exists(e | e.getOpName() = 'union')) then
							thisModule.unionMetaMethod(collectionOperations.first())
							else
								OclUndefined
							endif
						).append(
							if(collectionOperations->exists(e | e.getOpName() = 'intersection')) then
							thisModule.intersectionMetaMethod(collectionOperations.first())
							else
								OclUndefined
							endif
						)
					endif).
				append(
					cc.specification.bodyExpression.getFirstInstruction().debug()
				).
				union(
					cc.specification.bodyExpression.getFirstInstructionInCollectionOperations()
				).
				union(
					OCL!OperationCallExp.allInstances()->select(each | Set{'union','intersection'}.includes(each.getOpName()))
						->collect(e | thisModule.collectionOperation2instruction(e))	
				)
		)
}

-- Creates variables associated to allInstances calls to avoid multiple index
-- accesses in the same step.
-- @see allInstances2steps for generated steps.
lazy rule typeExp2meta {
	from
		typeExp : OCL!TypeExp
	to
		metaVar : Gremlin!VariableDeclaration (
			name <- 'meta'+typeExp.referredType.name,
			value <- metaStartStep
		),
		metaStartStep : Gremlin!StartStep (
			nextElement <- idxCall	
		),
		idxCall : Gremlin!IndexCall (
			indexName <- 'metaclasses',
			indexProperty  <- 'name',
			indexQuery <- typeExp.referredType.name
		)
}

-- Creates variables associated to oclIsTypeOf calls to avoid multiple index
-- accesses in the same step.
-- @see oclIsTypeOf2steps for generated steps.
lazy rule typeExp2metaNodes {
	from
		typeExp : OCL!TypeExp
	to
		metaVar : Gremlin!VariableDeclaration(
			name <- 'meta'+typeExp.referredType.name+'Node',
			value <- metaVarAccess
		),
		metaVarAccess : Gremlin!VariableAccess(
			name <- 'meta'+typeExp.referredType.name,
			nextElement <- nextIt
		),
		nextIt : Gremlin!NextCall ()
		
}











-- Transforms 'allInstances' expressions into kyanosInstanceOf edge step
-- and vertex step.
--lazy rule allInstances2steps {
rule allInstances2steps {
	from
		allInstances : OCL!OperationCallExp (allInstances.getOpName() = 'allInstances')
	to
		ine : Gremlin!InEStep (
			relationshipName <- 'kyanosInstanceOf',
			nextElement <- outv
		),
		outv : Gremlin!OutVStep (
			nextElement <- allInstances.getComposite()
		)
}

rule typeExp2steps {
	from
		typeExp : OCL!TypeExp (
			if typeExp.refImmediateComposite().oclIsTypeOf(OCL!OperationCallExp) then
				not(typeExp.refImmediateComposite().getOpName() = 'oclAsType')
			else
				true
			endif
		)
	to
		vap : Gremlin!VariableAccess(
			name <- 'meta'+	typeExp.referredType.name+'Node',
			nextElement <- typeExp.getComposite()
		)
}



rule oclIsUndefined2steps {
	from
		select : OCL!OperationCallExp (select.getOpName() = 'oclIsUndefined')
	to
		toList : Gremlin!ToListCall(
			nextElement <- isEmpty	
		),
		isEmpty : Gremlin!IsEmptyCall(
			
		)
}

lazy rule varIterator2def {
	from
		var :  OCL!Variable
	to
		vd : Gremlin!VariableDeclaration(
			name <- var.name,
			value <- fi
		),
		fi : Gremlin!ClosureIt()
}

-- Create a TransformStep from an oclIsTypeOf() OperationCallExp
-- Step closure is also created with the node comparison corresponding to
-- type conformance
-- Using a closure to compare ease the transformation by avoiding preprocessing
-- to generate equality comparisons
rule oclIsTypeOf2steps {
	from
		oclIsTypeOf : OCL!OperationCallExp (
			oclIsTypeOf.getOpName() = 'oclIsTypeOf'	
		)
	to
		tran : Gremlin!TransformStep(
			closure <- cl,
			nextElement <- clNext
		),
		clNext : Gremlin!NextCall(
			nextElement <- oclIsTypeOf.getComposite()			
		),
		cl : Gremlin!Closure(
			instructions <- eq	
		),
		eq : Gremlin!EqualityExpression(
			left <- it,
			right <- oclIsTypeOf.argument.first()
		),
		it : Gremlin!ClosureIt(
			nextElement <- outE	
		),
		outE : Gremlin!OutEStep(
			relationshipName <- 'kyanosInstanceOf',
			nextElement <- inV
		),
		inV : Gremlin!InVStep(
			nextElement <- next	
		),
		next : Gremlin!NextCall()
}

rule oclAsType2steps {
	from
		oclAsType : OCL!OperationCallExp (
			oclAsType.getOpName() = 'oclAsType'	
		)
	to
		ip : Gremlin!IdentityStep(
			nextElement <- oclAsType.getComposite(),
			needed <- false
		)
}





-- Transfroms a variable access expression into Gremlin filter iterator Step.
-- TODO : handle non-iterator variables
rule varExp2steps {
	from
		varExp : OCL!VariableExp(
			not(varExp.isInCollect()) or varExp.referredVariable.name='self'
		)
	to
		va : Gremlin!VariableAccess(
			name <- varExp.referredVariable.name.debug(),
			nextElement <- varExp.getComposite().debug('test')
		)
}

rule varExpInCollect2steps {
	from
		varExp : OCL!VariableExp (
			varExp.isInCollect() and not(varExp.referredVariable.name='self')	
		)
	to
		id : Gremlin!IdentityStep(
			nextElement <- varExp.getComposite().debug('aaaaaaaaaah')	
		)
}

rule propertyRefCallExp2steps {
	from
		prop : OCL!PropertyCallExp(
			prop.referredProperty.oclIsKindOf(OCL!EReference) and
			not(prop.isLastInComparison())
		)
	to
		outE : Gremlin!OutEStep(
			relationshipName <- prop.referredProperty.name,
			nextElement <- inV
		),
		inV : Gremlin!InVStep(
			nextElement <- prop.getComposite()
		)
}

rule propertyRefLastInComparison2steps {
	from
		prop : OCL!PropertyCallExp(
			prop.referredProperty.oclIsKindOf(OCL!EReference) and
			(prop.isLastInComparison())
		)
	to
		outE : Gremlin!OutEStep(
			relationshipName <- prop.referredProperty.name,
			nextElement <- inV
		),
		inV : Gremlin!InVStep(
			nextElement <- nCall
		),
		nCall : Gremlin!NextCall(
			nextElement <- prop.getComposite()	
		)
}

rule propertyAttCallExp2steps {
	from
		prop : OCL!PropertyCallExp(
			prop.referredProperty.oclIsKindOf(OCL!EAttribute) and
			not(prop.isLastInComparison())
		)
	to
		pp : Gremlin!PropertyStep(
			name <- prop.referredProperty.name,
			nextElement <- prop.getComposite()
		)
}

rule propertyAttCallExpLastInComparison2steps {
	from
		prop : OCL!PropertyCallExp(
			prop.referredProperty.oclIsKindOf(OCL!EAttribute) and
			prop.isLastInComparison() and not(prop.referredProperty.eType.oclIsTypeOf(OCL!EDataType))
		)
	to
		pp : Gremlin!PropertyStep(
			name <- prop.referredProperty.name,
			nextElement <- nCall
		),
		
		nCall : Gremlin!NextCall(
			nextElement <- prop.getComposite()	
		)
}

rule propertyAttBooleanLastInComparison2steps {
	from
		prop : OCL!PropertyCallExp(
			prop.referredProperty.oclIsTypeOf(OCL!EAttribute) and
			prop.referredProperty.eType.oclIsTypeOf(OCL!EDataType) and
			prop.referredProperty.eType.name = 'EBoolean'and
			prop.isLastInComparison()
		)
	to
		pp : Gremlin!PropertyStep(
			name <- prop.referredProperty.name,
			nextElement <- transform
		),
		transform : Gremlin!TransformStep(
			closure <- clos,
			nextElement <- nextCall
		),
		clos : Gremlin!Closure(
			instructions <- eq
		),
		eq : Gremlin!EqualityExpression(
			left <- closureIt,
			right <- bool
		),
		closureIt : Gremlin!ClosureIt(
			
		),
		bool : Gremlin!StringLiteral(
			value <- 'true'
		),
		nextCall : Gremlin!NextCall(
			nextElement <- prop.getComposite()	
		)
}

rule propertyAttIntegerLastInComparison2steps {
	from
		prop : OCL!PropertyCallExp(
			prop.referredProperty.oclIsTypeOf(OCL!EAttribute) and 
			prop.referredProperty.eType.oclIsTypeOf(OCL!EDataType) and
			prop.referredProperty.eType.name = 'EInt' and
			prop.isLastInComparison()
		)
	to
		pp : Gremlin!PropertyStep(
			name <- prop.referredProperty.name	
		)
}

rule propertyAttStringLastInComparison2steps {
	from
		prop : OCL!PropertyCallExp(
			prop.referredProperty.oclIsTypeOf(OCL!EAttribute) and
			prop.referredProperty.eType.oclIsTypeOf(OCL!EDataType) and
			prop.referredProperty.eType.name = 'EString' and
			prop.isLastInComparison()
		)
	to
		pp : Gremlin!PropertyStep(
			name <- prop.referredProperty.name	
		)
}

