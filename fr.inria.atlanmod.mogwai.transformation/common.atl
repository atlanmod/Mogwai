-- @path OCL=http://www.eclipse.org/ocl/1.1.0/Ecore

-- Common helpers to process input OCL model.

-- Author AtlanMod - Inria

library common;

-- Get the operation name of a CallExp element.
helper context OCL!CallExp def : getOpName() : String = 
	if self.oclIsTypeOf(OCL!OperationCallExp) then
		self.referredOperation.name
	else
		if self.oclIsTypeOf(OCL!IteratorExp) then
			self.name
		else
			OclUndefined
		endif
	endif
	;

-- Get the first instruction in an OCLExpression.
-- Traverse the source reference chain to get the first element.
helper context OCL!OCLExpression def : getFirstInstruction() : OCL!OCLExpression =
	if self.oclIsTypeOf(OCL!OperationCallExp) then
		if self.isComparison() then
			self
		else
			self.source.getFirstInstruction()
		endif
	else
		if self.oclIsTypeOf(OCL!IteratorExp) then
			self.source.getFirstInstruction()
		else
			if self.oclIsTypeOf(OCL!VariableExp) or
				self.oclIsKindOf(OCL!LiteralExp) or
				self.oclIsTypeOf(OCL!TypeExp) or
				self.oclIsKindOf(OCL!BooleanLiteralExp) then
				self
			else
				self.source.getFirstInstruction()
			endif
		endif
	endif
	;

-- Returns true if the OperationCallExp is an comparison operation.
helper context OCL!OperationCallExp def : isComparison() : Boolean =
	OrderedSet{'=','or','and','>','>=','<','<=','<>','not'}.includes(self.getOpName())
	;
	
-- Retrieve the next operation to transform from a given OCL expression.
-- Returns the immediate composite of self if the expression can be translated in a raw, the first expression
-- of a collect body or OclUndefined if the immediate composite can not be translated using matched rules.
helper context OclAny def : getComposite() : OclAny =
	let composite : OclAny = self.refImmediateComposite() in
	if composite.oclIsTypeOf(OCL!ExpressionInOCL) then
		-- ExpressionInOCL is the root element of the query (the "specification" reference
		-- of the constraint). Returns OclUndefined to flag the end of the traversal
		OclUndefined
	else
		-- Collect flattening
		if composite.oclIsTypeOf(OCL!IteratorExp) then
			if composite.getOpName() = 'collect' then
				if composite.hasInBody(self) then
					-- If self is the last element in the collect expression returns
					-- the collect operation to handle unions
					composite
				else
					-- If self is not in the collect expression returns the content
					-- of the expression (it flatten collect and delegate its translation
					-- at the end of its inner expression)
					composite.body.getFirstInstruction()
				endif
			else 
				if Set{'select','reject','exists','forAll'}->includes(composite.getOpName()) then
					if composite.hasInBody(self) then
						-- Do not return OperationCallExp if they are the parent of their argument
						-- (they have been transformed before)
						OclUndefined
					else
						composite
					endif
				else
					composite
				endif
			endif
		else
			if composite.oclIsTypeOf(OCL!OperationCallExp) then
				if composite.isComparison() then
					-- If the container is a comparison there is two solutions:
					-- (i)  It contains self, and has been handled before
					-- (ii) It doesn't, and it is an error (it should have been handeled before)
					OclUndefined
				else
					if Set{'union','intersection'}->includes(composite.getOpName()) then
							OclUndefined
					else
					-- The container is a function call
						if composite.hasInArguments(self) then
						-- The container contains self in its arguments, it has been handled
						-- before
							OclUndefined
						else
						-- The container does not contain self in its argument, simply handle it
							composite
						endif
					endif
				endif
			else
				-- If the next element is not an IteratorExp or an OperationCallExp, returns it
				composite
			endif
		endif
	endif
	;

-- Returns true if o is contained in the argument expression of self.
helper context OCL!OperationCallExp def : hasInArguments(o : OclAny) : Boolean =
	if self.argument->size() = 0 then
		false
	else
		self.recursiveHasInArguments(o, self.argument.first().getFirstInstruction())
	endif
	;

-- Recursive search function of hasInArguments helper.
helper context OCL!OperationCallExp def : recursiveHasInArguments(o : OclAny, e : OCL!OCLExpression) : Boolean =
	if e = self then
		false
	else
		if e = o then
			true
		else
			self.recursiveHasInArguments(o, e.refImmediateComposite())
		endif
	endif
	;

-- Returns true if o is contained in the body expression of self.
helper context OCL!IteratorExp def : hasInBody(o : OclAny) : Boolean = 
	self.recursiveHasInBody(o,self.body.getFirstInstruction())
	;

-- Recursive search function of hasInBody helper.
helper context OCL!IteratorExp def : recursiveHasInBody(o : OclAny, e : OCL!OCLExpression) : Boolean =
	if e = self then
		false
	else
		if e = o then
			true
		else
			self.recursiveHasInBody(o, e.refImmediateComposite())
		endif
	endif
	;

-- Returns true if self is contained in the body expression of a collect OperationCallExp
helper context OCL!OCLExpression def : isInCollect() : Boolean = 
	if self.refImmediateComposite().oclIsTypeOf(OCL!IteratorExp) then
		self.refImmediateComposite().name = 'collect'
	else
		self.refImmediateComposite().isInCollect()
	endif
	;
